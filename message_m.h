//
// Generated file, do not edit! Created by opp_msgtool 6.0 from message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class vector;
class AddPeerToSeedRequest;
class AddPeerToPeerRequest;
class LivelinessRequest;
class LivelinessReply;
class Dead;
class AddPeerToSeedReply;
class Gossip;
class Block;
// cplusplus {{
#include <vector>
#include <bits/stdc++.h>
// }}

/**
 * Class generated from <tt>message.msg:7</tt> by opp_msgtool.
 * <pre>
 * class vector
 * {
 *     int32_t label[] \@custom \@sizeGetter(getNumLabels) \@sizeSetter(setNumLabels);
 * }
 * </pre>
 */
class vector
{
  protected:

  private:
    void copy(const vector& other);

  protected:
    bool operator==(const vector&) = delete;

  public:
    vector();
    vector(const vector& other);
    virtual ~vector();
    vector& operator=(const vector& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);


    protected:
    std::vector<int32_t> labels;
    public:
        // expected methods:
        virtual void setNumLabels(size_t size) {labels.resize(size);}
        virtual size_t getNumLabels() const {return labels.size();}
        virtual int32_t getLabel(size_t k) const {return labels.at(k);}
        virtual void setLabel(size_t k, int32_t label) {labels.at(k) = label;}
        // new methods:
        virtual void push(int32_t label) {labels.push_back(label);}
        virtual int32_t pop() {auto l=labels.back();labels.pop_back();return l;}
        virtual void remove(int32_t label) {
        	auto it = std::find(labels.begin(), labels.end(),label);
 
            if (it != labels.end()) {
                labels.erase(it);
            }
        }
};

/**
 * Class generated from <tt>message.msg:34</tt> by opp_msgtool.
 * <pre>
 * message AddPeerToSeedRequest
 * {
 *     int peer_ind;
 *     int seed_ind;
 *     string msg;
 * }
 * </pre>
 */
class AddPeerToSeedRequest : public ::omnetpp::cMessage
{
  protected:
    int peer_ind = 0;
    int seed_ind = 0;
    omnetpp::opp_string msg;

  private:
    void copy(const AddPeerToSeedRequest& other);

  protected:
    bool operator==(const AddPeerToSeedRequest&) = delete;

  public:
    AddPeerToSeedRequest(const char *name=nullptr, short kind=0);
    AddPeerToSeedRequest(const AddPeerToSeedRequest& other);
    virtual ~AddPeerToSeedRequest();
    AddPeerToSeedRequest& operator=(const AddPeerToSeedRequest& other);
    virtual AddPeerToSeedRequest *dup() const override {return new AddPeerToSeedRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPeer_ind() const;
    virtual void setPeer_ind(int peer_ind);

    virtual int getSeed_ind() const;
    virtual void setSeed_ind(int seed_ind);

    virtual const char * getMsg() const;
    virtual void setMsg(const char * msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AddPeerToSeedRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AddPeerToSeedRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:40</tt> by opp_msgtool.
 * <pre>
 * message AddPeerToPeerRequest
 * {
 *     int sender_peer_ind;
 *     int reciever_peer_ind;
 * }
 * </pre>
 */
class AddPeerToPeerRequest : public ::omnetpp::cMessage
{
  protected:
    int sender_peer_ind = 0;
    int reciever_peer_ind = 0;

  private:
    void copy(const AddPeerToPeerRequest& other);

  protected:
    bool operator==(const AddPeerToPeerRequest&) = delete;

  public:
    AddPeerToPeerRequest(const char *name=nullptr, short kind=0);
    AddPeerToPeerRequest(const AddPeerToPeerRequest& other);
    virtual ~AddPeerToPeerRequest();
    AddPeerToPeerRequest& operator=(const AddPeerToPeerRequest& other);
    virtual AddPeerToPeerRequest *dup() const override {return new AddPeerToPeerRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSender_peer_ind() const;
    virtual void setSender_peer_ind(int sender_peer_ind);

    virtual int getReciever_peer_ind() const;
    virtual void setReciever_peer_ind(int reciever_peer_ind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AddPeerToPeerRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AddPeerToPeerRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:45</tt> by opp_msgtool.
 * <pre>
 * message LivelinessRequest
 * {
 *     int timestamp;
 *     int self_ind;
 * }
 * </pre>
 */
class LivelinessRequest : public ::omnetpp::cMessage
{
  protected:
    int timestamp = 0;
    int self_ind = 0;

  private:
    void copy(const LivelinessRequest& other);

  protected:
    bool operator==(const LivelinessRequest&) = delete;

  public:
    LivelinessRequest(const char *name=nullptr, short kind=0);
    LivelinessRequest(const LivelinessRequest& other);
    virtual ~LivelinessRequest();
    LivelinessRequest& operator=(const LivelinessRequest& other);
    virtual LivelinessRequest *dup() const override {return new LivelinessRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);

    virtual int getSelf_ind() const;
    virtual void setSelf_ind(int self_ind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LivelinessRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LivelinessRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:50</tt> by opp_msgtool.
 * <pre>
 * message LivelinessReply
 * {
 *     int timestamp;
 *     int sender_peer_ind;
 *     int self_ind;
 * }
 * </pre>
 */
class LivelinessReply : public ::omnetpp::cMessage
{
  protected:
    int timestamp = 0;
    int sender_peer_ind = 0;
    int self_ind = 0;

  private:
    void copy(const LivelinessReply& other);

  protected:
    bool operator==(const LivelinessReply&) = delete;

  public:
    LivelinessReply(const char *name=nullptr, short kind=0);
    LivelinessReply(const LivelinessReply& other);
    virtual ~LivelinessReply();
    LivelinessReply& operator=(const LivelinessReply& other);
    virtual LivelinessReply *dup() const override {return new LivelinessReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);

    virtual int getSender_peer_ind() const;
    virtual void setSender_peer_ind(int sender_peer_ind);

    virtual int getSelf_ind() const;
    virtual void setSelf_ind(int self_ind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LivelinessReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LivelinessReply& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:56</tt> by opp_msgtool.
 * <pre>
 * message Dead
 * {
 *     int timestamp;
 *     int peer_ind;
 *     int seed_ind;
 * }
 * </pre>
 */
class Dead : public ::omnetpp::cMessage
{
  protected:
    int timestamp = 0;
    int peer_ind = 0;
    int seed_ind = 0;

  private:
    void copy(const Dead& other);

  protected:
    bool operator==(const Dead&) = delete;

  public:
    Dead(const char *name=nullptr, short kind=0);
    Dead(const Dead& other);
    virtual ~Dead();
    Dead& operator=(const Dead& other);
    virtual Dead *dup() const override {return new Dead(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);

    virtual int getPeer_ind() const;
    virtual void setPeer_ind(int peer_ind);

    virtual int getSeed_ind() const;
    virtual void setSeed_ind(int seed_ind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Dead& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Dead& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:62</tt> by opp_msgtool.
 * <pre>
 * message AddPeerToSeedReply
 * {
 *     int peer_ind;
 *     int seed_ind;
 *     vector peer_list;
 * }
 * </pre>
 */
class AddPeerToSeedReply : public ::omnetpp::cMessage
{
  protected:
    int peer_ind = 0;
    int seed_ind = 0;
    vector peer_list;

  private:
    void copy(const AddPeerToSeedReply& other);

  protected:
    bool operator==(const AddPeerToSeedReply&) = delete;

  public:
    AddPeerToSeedReply(const char *name=nullptr, short kind=0);
    AddPeerToSeedReply(const AddPeerToSeedReply& other);
    virtual ~AddPeerToSeedReply();
    AddPeerToSeedReply& operator=(const AddPeerToSeedReply& other);
    virtual AddPeerToSeedReply *dup() const override {return new AddPeerToSeedReply(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPeer_ind() const;
    virtual void setPeer_ind(int peer_ind);

    virtual int getSeed_ind() const;
    virtual void setSeed_ind(int seed_ind);

    virtual const vector& getPeer_list() const;
    virtual vector& getPeer_listForUpdate() { return const_cast<vector&>(const_cast<AddPeerToSeedReply*>(this)->getPeer_list());}
    virtual void setPeer_list(const vector& peer_list);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AddPeerToSeedReply& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AddPeerToSeedReply& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:68</tt> by opp_msgtool.
 * <pre>
 * message Gossip
 * {
 *     int timestamp;
 *     int sender_peer_ind;
 *     string msg;
 * }
 * </pre>
 */
class Gossip : public ::omnetpp::cMessage
{
  protected:
    int timestamp = 0;
    int sender_peer_ind = 0;
    omnetpp::opp_string msg;

  private:
    void copy(const Gossip& other);

  protected:
    bool operator==(const Gossip&) = delete;

  public:
    Gossip(const char *name=nullptr, short kind=0);
    Gossip(const Gossip& other);
    virtual ~Gossip();
    Gossip& operator=(const Gossip& other);
    virtual Gossip *dup() const override {return new Gossip(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTimestamp() const;
    virtual void setTimestamp(int timestamp);

    virtual int getSender_peer_ind() const;
    virtual void setSender_peer_ind(int sender_peer_ind);

    virtual const char * getMsg() const;
    virtual void setMsg(const char * msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Gossip& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Gossip& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message.msg:74</tt> by opp_msgtool.
 * <pre>
 * message Block
 * {
 *     string previous_hash;
 *     string merkel_root;
 *     string timestamp;
 * }
 * </pre>
 */
class Block : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string previous_hash;
    omnetpp::opp_string merkel_root;
    omnetpp::opp_string timestamp;

  private:
    void copy(const Block& other);

  protected:
    bool operator==(const Block&) = delete;

  public:
    Block(const char *name=nullptr, short kind=0);
    Block(const Block& other);
    virtual ~Block();
    Block& operator=(const Block& other);
    virtual Block *dup() const override {return new Block(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getPrevious_hash() const;
    virtual void setPrevious_hash(const char * previous_hash);

    virtual const char * getMerkel_root() const;
    virtual void setMerkel_root(const char * merkel_root);

    virtual const char * getTimestamp() const;
    virtual void setTimestamp(const char * timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Block& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Block& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const vector *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline vector *fromAnyPtr(any_ptr ptr) { return ptr.get<vector>(); }
template<> inline AddPeerToSeedRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<AddPeerToSeedRequest*>(ptr.get<cObject>()); }
template<> inline AddPeerToPeerRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<AddPeerToPeerRequest*>(ptr.get<cObject>()); }
template<> inline LivelinessRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<LivelinessRequest*>(ptr.get<cObject>()); }
template<> inline LivelinessReply *fromAnyPtr(any_ptr ptr) { return check_and_cast<LivelinessReply*>(ptr.get<cObject>()); }
template<> inline Dead *fromAnyPtr(any_ptr ptr) { return check_and_cast<Dead*>(ptr.get<cObject>()); }
template<> inline AddPeerToSeedReply *fromAnyPtr(any_ptr ptr) { return check_and_cast<AddPeerToSeedReply*>(ptr.get<cObject>()); }
template<> inline Gossip *fromAnyPtr(any_ptr ptr) { return check_and_cast<Gossip*>(ptr.get<cObject>()); }
template<> inline Block *fromAnyPtr(any_ptr ptr) { return check_and_cast<Block*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H

